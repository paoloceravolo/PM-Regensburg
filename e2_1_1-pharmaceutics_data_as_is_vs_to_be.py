# -*- coding: utf-8 -*-
"""pharmaceutics_data_AS_IS_vs_TO_BE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v16uq-4TbSAiXUFq8BWQjq8CIZIwzKQ6

***Business Information Systems*** - Prof. Paolo Ceravolo, Dott. Marcello Carapezza

Value Models

Case study: pharmaceutics data

AS-IS vs TO-BE Python script
"""

# Import the needed libraries

# To better exploit mathematical operations
import numpy as np

#Plotting
import matplotlib.pyplot as plt

#Data Manipulation
import pandas as pd

#To deal with random data and random data generation
import random

#Data visualization and manupulation
import seaborn as sns

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# AS-IS version (little revised)
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Regions where EA company is active, number of handbooks sold per region and cost of the handbook per region

regions = ['Austria','France','Italy','Slovenia','Switzerland']
sold = [30,24,23,19,12]
pv = [150,140,130,150,155]

# Object representing our data

data = {'Regions': regions, 'Sold': sold}

# Making the object a table to better manipulate it, the index is associated with the regions column

df_asis = pd.DataFrame(data, index=regions)

# Calculate the economic value per region, adding it to our table
# Note: the lists must be aligned

gen_value = [v*pv[i] for i,v in enumerate(df_asis['Sold'])]
df_asis['Value'] = gen_value

print("AS-IS version \n\n", df_asis)

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# TO-BE version (little revised)
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Create the table with synthetic data

df_tobe = pd.DataFrame(np.random.randint(2,size=(100,6)), columns=list(['Analgesics', 'Antibiotic', 'Anticoagulant', 'Antidepressant', 'Anticancer', 'Antiepileptic']))

# Computing the economic value
# Price for less or more than two subscriptions 

sl3 = 100
sm3 = 120

# Number of subscriptions per user

num_of_subs = df_tobe.sum(axis=1)

# Generating the value (per user) that depens on the number of categories subscribed by each user

gen_val = [i*sl3 if i<3 else i*sm3 for i in num_of_subs] 

# Adding the total subscriptions per user coulumn to our table

df_tobe['Total'] = df_tobe.sum(axis=1)

# Adding the generated value column to our table

df_tobe['Value'] = gen_val

# Adding regions information to our table

df_tobe['Region'] = random.choices(regions, k=100)

# Data agregation by regions (sorting alphabetically)

group = df_tobe.groupby('Region', sort=True).agg('sum')

#Printing the aggregated table

print("\nTO-BE version \n\n", group)


# Position of bars on x-axis
ind = np.arange(len(regions))
#print(ind)

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# AS-IS vs TO-BE plotting
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------

width=0.4
plt.bar(regions, group['Value'], width, label='To-BE value')
plt.bar(ind+width, df_asis['Value'], width, label='AS-IS value')
plt.xticks(ind + width / 2, regions)
plt.xlabel("Regions")
plt.ylabel("Generated value")
plt.title("\nAS-IS vs TO-BE plot \n\n")
plt.legend(loc='best')
plt.show()